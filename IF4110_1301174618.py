# -*- coding: utf-8 -*-
"""ai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1apWgQBKV78deXxDr2J60M5ni8-OGSJ5N
"""

import numpy as np
from copy import deepcopy

panjangin = 6
ukuran_populasi = 5
rmin_x1 = -3
rmin_x2 = -2
rmax_x1 = 3
rmax_x2 = 2

def individu (panjangin):
  a = []
  for i in range(panjangin):
    a.append(np.random.randint(0,2))
  return a

def populasi (ukuran_populasi):
  b = []
  for i in range(ukuran_populasi):
    b.append(individu(panjangin))
  return b

def gchf (ind):
  c=0
  for i in range(1,4):
    c= c+(2**(-i))
  x1 = ind[:4]
  x2 = ind[-3:]
  d=0
  e=0
  for i in range (1,4):
    d=d+(2**(-i))*x1[i-1]
    e=e+(2**(-i))*x2[i-1]
  hasil_x1 = rmin_x1 + ((rmax_x1-rmin_x1)/c)*d
  hasil_x2 = rmin_x2 + ((rmax_x2-rmin_x2)/c)*e
  return hasil_x1, hasil_x2

svpopulasi = populasi(ukuran_populasi)
for ind in svpopulasi:
  print(gchf(ind))

def fitnes (x1,x2):
  f = 1/(((((4-(2.1*(x1**2))+((x1**4)/3)))*x1**2)+(x1*x2)+((-4+4*x2**2))*x2**2)+0.01)
  return f

fit = []
for i in range (ukuran_populasi):
  x1,x2 = gchf(svpopulasi[i])
  fit.append(fitnes (x1,x2))
print(fit)

def elitism(populasi, fit, n):
  popuelt = deepcopy([x for x,_ in sorted(zip(populasi, fit),key = lambda x:x[1], reverse=True)])[:n]
  fitelt = [x for _,x in sorted(zip(populasi, fit),key = lambda x:x[1], reverse=True)][:n]
  return popuelt

def roulet(fit):
  check = True
  maxFitness = max(fit)
  while (check):
    indi = round(np.random.uniform()*(len(fit)-1))
    r = np.random.uniform()
    if (r<(fit[indi]/maxFitness)):
      check = False
  return(indi)

parent1 = svpopulasi[roulet(fit)]
parent2 = svpopulasi[roulet(fit)]
print(parent1,parent2)

def cross(parent1, parent2):
  cross_poin = np.random.randint(1,panjangin-1)
  chil1 = np.hstack((parent1[0:cross_poin], parent2[cross_poin:]))
  chil2 = np.hstack((parent2[0:cross_poin], parent1[cross_poin:]))
  
  return chil1, chil2

chil1, chil2 = cross(parent1, parent2)
print("Parents")
print(parent1)
print(parent2)
print("Children")
print(chil1)
print(chil2)

def mutasi (chil1,chil2):
  prob = np.random.uniform()
  if prob < 0.1:
    a1 = np.random.randint(0,6)
    a2 = np.random.randint(0,6)
    for i in range(6):
      if a1 == i:
        if chil1[i] == 0:
          chil1[i]= 1
        else : chil1[i]= 0
      if a2 == i:
        if chil2[i] ==0:
          chil2[i]=1
        else : chil2[i]=0
    
  return chil1, chil2

hasilmutasi = mutasi(chil1,chil2)

population = populasi(ukuran_populasi)
for i in range(100):
  fit = []
  for i in range (ukuran_populasi):
    x1,x2 = gchf(population[i])
    fit.append(fitnes (x1,x2))
#  print(list(zip(population,fit)))
  print(fit)

  fitness = fit
  newPopulation = elitism(population, fitness, 5)
  while len(newPopulation) < 5:
    parent1, parent2 = roulate(fit)
    chil1,chil2 = cross(parent1, parent2)
    chil1,chil2 = mutasi(chil1, chil2)
    newPopulation += chil1
    newPopulation += chil2
  population = newPopulation

